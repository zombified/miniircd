#!/usr/bin/env python
# Hey, Emacs! This is -*-python-*-.
#
# Copyright (C) 2003, 2011-2013 Joel Rosdahl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
# Originallly authored by Joel Rosdahl <joel@rosdahl.net>
#
# Contributors:
#   - Matt Behrens (github.com/zigg)
#   - Alex Wright (github.com/alexwright)
#   - Bui (github.com/bui)
#   - Rui Carmo (github.com/rcarmo)
#   - Joel Kleier (github.com/zombified)
#

import argparse
import sys

from server import Server
from utils import VERSION, PortListType

# test out import of ldap module, since it's not part of core python
try:
    import simpleldap
    ldap_available = True
except:
    ldap_available = False


def main(argv):
    parser = argparse.ArgumentParser(
                prog='MiniIRCd',
                fromfile_prefix_chars='@',
                description="A small, feature-light IRC server.")

    parser.add_argument(
        '-d', '--daemon', action='store_true', default=False,
        help="Run the server in daemon mode")
    parser.add_argument(
        "--debug", action='store_true', default=False,
        help="print debug messages to stdout")

    # requires the simpleldap library (which depends on the python-ldap
    # library) to be installed
    if ldap_available:
        parser.add_argument(
            "--ldap-server", metavar='localhost', default=None,
            help="If option is present, ldap authentication is used for " \
                 "connecting to the server. Requires python-ldap and simpleldap" \
                 "packages to be installed, or the option will be ignored. " \
                 "This method SHOULD NOT be used without the --ssl-pem-file " \
                 "option, passwords clients give will be sent in plain text " \
                 "otherwise.")
        parser.add_argument(
            "--ldap-port", metavar='389', default=None, type=int,
            help="Port to connect to LDAP server on.")
        parser.add_argument(
            "--ldap-dn", metavar="''", default='',
            help="DN to use to bind user to the LDAP server. Must contain one " \
                 "format string variable, ie 'uid=%s,ou=users,dc=exampe,dc=com'")
        #parser.add_argument(
        #    "--ldap-password", metavar="''", default='',
        #    help="Password to use to connect to the LDAP server.")
        parser.add_argument(
            "--ldap-encryption", metavar="None", default=None,
            help="Type of encryption to use when communicating to the LDAP " \
                 "server. The possible values are 'None', 'SSL', or 'TLS'")
        parser.add_argument(
            "--ldap-require-cert", metavar="None", default=None,
            help="Require a cert with TLS connection. Can be True or False, or " \
                 "None (the default) to not explicitly set the configuration " \
                 "option")
        parser.add_argument(
            "--ldap-debug", action="store_true", default=False,
            help="Debug options are turned on for LDAP, statements are output " \
                 "to standard error")

    parser.add_argument(
        "--logdir", metavar='/path/to/log/direcotory/', default=None,
        help="store channel log in directory X, if no directory is specified" \
             "no channel logging takes place")
    parser.add_argument(
        "--motd", metavar='file.txt', default=None,
        help="display file X as message of the day")
    parser.add_argument(
        "-p", "--password", metavar='password', default=None,
        help="Specify simple password to connect. Default: no password " \
             "required. If LDAP option is enabled, this option is ignored. " \
             "It is recommended to use the --ssl-pem-file option with this " \
             "option so passwords from clients aren't sent as plain text.")
    parser.add_argument(
        "--ports", metavar='port1[,port2,...]', default=[6667],
        type=PortListType(),
        help="listen to ports X (a list separated by comma or whitespace);"
             " default: 6667")
    parser.add_argument(
        "--ssl-pem-file", metavar='cert.pem', default=None,
        help="Enables client-to-server SSL support, and specifies the " \
             "file containing the SSL certificate and key, stored in the " \
             "PEM format")
    parser.add_argument(
        "--statedir",  metavar='/path/to/state/directory/', default=None,
        help="save persistent channel state (topic, key) in directory X")
    parser.add_argument(
        "--verbose", action="store_true", default=False,
        help="be verbose (print some progress messages to stdout)")
    parser.add_argument(
        "--version", action="version", version="%(prog)s "+VERSION)

    options = parser.parse_args()

    if options.debug:
        options.verbose = True
    server = Server(options)
    if options.daemon:
        server.daemonize()
    try:
        server.start()
    except KeyboardInterrupt:
        server.print_error("Interrupted.")


main(sys.argv)

# ex:et:sw=4:ts=4
